# Default values for Nexus Helm chart
# This is a YAML-formatted file.

# Nexus configuration
nexus:
  image:
    repository: sonatype/nexus3
    tag: latest
    pullPolicy: IfNotPresent
  
  resources:
    requests:
      memory: "2Gi"
      cpu: "1"
    limits:
      memory: "4Gi"
      cpu: "2"
  
  # Nexus security settings
  securityContext:
    runAsUser: 200
    fsGroup: 200
  
  # Nexus configuration properties
  config:
    data:
      nexus.scripts.allowCreation: "true"
      nexus.security.randompassword: "false"
      nexus.datastore.enabled: "true"
      nexus.datastore.nexus.type: "jdbc"
      nexus.datastore.nexus.maximumPoolSize: "20"
      nexus.datastore.nexus.minimumIdle: "5"
      nexus.datastore.nexus.connectionTimeout: "30000"
      nexus.datastore.nexus.idleTimeout: "600000"
      nexus.datastore.nexus.maxLifetime: "1800000"
      nexus.cleanup.retainDays: "30"
      nexus.search.event.handler.flushOnCount: "500"
  
  # Initial admin password
  adminPassword: "passw0rd"
  
  # JVM memory settings
  javaOpts: "-Xms2g -Xmx2g -XX:MaxDirectMemorySize=3g -Djava.util.prefs.userRoot=/nexus-data/javaprefs"
  
  # Persistence configuration
  persistence:
    enabled: true
    storageClass: "gp2"
    accessMode: ReadWriteOnce
    size: 100Gi

# Aurora PostgreSQL configuration
database:
  # Use AWS Aurora PostgreSQL
  enabled: true
  # Aurora PostgreSQL configuration
  aurora:
    engine: "aurora-postgresql"
    engineVersion: "15.3"
    instanceClass: "db.r5.large"
    dbName: "nexus"
    username: "nexus"
    # Password will be stored in AWS Secrets Manager
    # and mounted as environment variables
    existingSecret: "nexus-db-credentials"
    port: 5432
    backupRetentionPeriod: 7
    storageEncrypted: true
    autoMinorVersionUpgrade: true
    dbParameterGroupName: "default.aurora-postgresql15"
    vpcSecurityGroupIds: []  # Will be populated by terraform or manually
    dbSubnetGroupName: ""    # Will be populated by terraform or manually

# AWS ALB Ingress Controller configuration
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": {"Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    alb.ingress.kubernetes.io/certificate-arn: ""  # Add your ACM certificate ARN here
    alb.ingress.kubernetes.io/healthcheck-path: /service/rest/v1/status
    alb.ingress.kubernetes.io/success-codes: "200"
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "15"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "2"
  hosts:
    - host: nexus.example.com
      paths:
        - path: /*
          pathType: ImplementationSpecific
  tls:
    - secretName: nexus-tls
      hosts:
        - nexus.example.com

# Docker registry configuration
dockerRegistry:
  enabled: true
  port: 8082
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 8082}]'
      alb.ingress.kubernetes.io/certificate-arn: ""  # Add your ACM certificate ARN here
    hosts:
      - host: docker.nexus.example.com
        paths:
          - path: /*
            pathType: ImplementationSpecific

# Service configuration
service:
  type: ClusterIP
  port: 8081
  
# Pod configuration
podAnnotations: {}
nodeSelector: {}
tolerations: []
affinity: {}

# ServiceAccount configuration
serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: ""  # Add IAM role ARN for service account if needed
  name: "nexus"